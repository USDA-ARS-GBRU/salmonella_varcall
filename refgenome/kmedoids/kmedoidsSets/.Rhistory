data = df,
lwd = 2,
outline=F,
yaxt="n",
las = 1)
stripchart(abund*100 ~ group,
data = df,
vertical = TRUE,
method = "jitter",
jitter = 0.2,
add = TRUE,
cex=1.5,
pch=16)
library(phyloseq)
library(magrittr)
#pdf("LL_Ecoli_Shigella.pdf", width=5, height=4)
TaxonomicLevelNames <- colnames(LL.ps@tax_table)
LL.ps@tax_table[,"Genus"] %>%
unique() %>%
sort() %>%
as.vector() -> DM.TaxNames # all taxonomic names within that higher level given by tlev
LL.ps %>%
tax_glom("Genus",NArm = TRUE) %>%
transform_sample_counts(function(OTU){OTU/sum(OTU)}) -> LL.glom.t
idx <- which(LL.glom.t@tax_table[,"Genus"] == "Escherichia/Shigella")
LL.compartment <- factor(LL.ps@sam_data$compartment,
levels= c("ID", "IM", "CD"))
df <- data.frame(group = LL.compartment,
abund = as.numeric(LL.glom.t@otu_table[,idx]))
#  if(sum(df$abund)< 0.01) next # Skips those plots where the sum of ALL abundances is below a certain threshold.
par(mgp=c(0,0.5,0), xaxt="t", mar=c(4,2,2,0.5))
boxplot(abund*100 ~ group,
data = df,
lwd = 2,
outline=F,
yaxt="n",
las = 1)
stripchart(abund*100 ~ group,
data = df,
vertical = TRUE,
method = "jitter",
jitter = 0.2,
add = TRUE,
cex=1.5,
pch=16)
# col = color.ordination.samples[1:10])
title(main = paste0("Genus","\n"), cex.main=0.8)
title(ylab="Abundance (%)", line = 1, cex.lab=0.8)
axis(side=2, cex.axis=0.6)
#    dev.off()
LL.compartment
stripchart(abund*100 ~ group,
data = df,
vertical = TRUE,
method = "jitter",
jitter = 0.2,
add = TRUE,
cex=1.5,
col=LL.compartment,
pch=16)
library(phyloseq)
library(magrittr)
#pdf("LL_Ecoli_Shigella.pdf", width=5, height=4)
TaxonomicLevelNames <- colnames(LL.ps@tax_table)
LL.ps@tax_table[,"Genus"] %>%
unique() %>%
sort() %>%
as.vector() -> DM.TaxNames # all taxonomic names within that higher level given by tlev
LL.ps %>%
tax_glom("Genus",NArm = TRUE) %>%
transform_sample_counts(function(OTU){OTU/sum(OTU)}) -> LL.glom.t
idx <- which(LL.glom.t@tax_table[,"Genus"] == "Escherichia/Shigella")
LL.compartment <- factor(LL.ps@sam_data$compartment,
levels= c("ID", "IM", "CD"))
df <- data.frame(group = LL.compartment,
abund = as.numeric(LL.glom.t@otu_table[,idx]))
#  if(sum(df$abund)< 0.01) next # Skips those plots where the sum of ALL abundances is below a certain threshold.
par(mgp=c(0,0.5,0), xaxt="t", mar=c(4,2,2,0.5))
boxplot(abund*100 ~ group,
data = df,
lwd = 2,
outline=F,
yaxt="n",
las = 1)
stripchart(abund*100 ~ group,
data = df,
vertical = TRUE,
method = "jitter",
jitter = 0.2,
add = TRUE,
cex=1.5,
col=LL.compartment,
pch=16)
# col = color.ordination.samples[1:10])
title(main = paste0("Genus","\n"), cex.main=0.8)
title(ylab="Abundance (%)", line = 1, cex.lab=0.8)
axis(side=2, cex.axis=0.6)
#    dev.off()
group
par(mgp=c(0,0.5,0), xaxt="t", mar=c(4,2,2,0.5))
boxplot(abund*100 ~ group,
data = df,
lwd = 2,
outline=F,
yaxt="n",
las = 1)
stripchart(abund*100 ~ group,
data = df,
vertical = TRUE,
method = "jitter",
jitter = 0.2,
add = TRUE,
cex=1.5,
col=group,
pch=16)
library(phyloseq)
library(magrittr)
#pdf("LL_Ecoli_Shigella.pdf", width=5, height=4)
TaxonomicLevelNames <- colnames(LL.ps@tax_table)
LL.ps@tax_table[,"Genus"] %>%
unique() %>%
sort() %>%
as.vector() -> DM.TaxNames # all taxonomic names within that higher level given by tlev
LL.ps %>%
tax_glom("Genus",NArm = TRUE) %>%
transform_sample_counts(function(OTU){OTU/sum(OTU)}) -> LL.glom.t
idx <- which(LL.glom.t@tax_table[,"Genus"] == "Escherichia/Shigella")
LL.compartment <- factor(LL.ps@sam_data$compartment,
levels= c("ID", "IM", "CD"))
df <- data.frame(group = LL.compartment,
abund = as.numeric(LL.glom.t@otu_table[,idx]))
#  if(sum(df$abund)< 0.01) next # Skips those plots where the sum of ALL abundances is below a certain threshold.
par(mgp=c(0,0.5,0), xaxt="t", mar=c(4,2,2,0.5))
boxplot(abund*100 ~ group,
data = df,
lwd = 2,
outline=F,
yaxt="n",
las = 1)
stripchart(abund*100 ~ group,
data = df,
vertical = TRUE,
method = "jitter",
jitter = 0.2,
add = TRUE,
cex=1.5,
col=group,
pch=16)
library(phyloseq)
library(magrittr)
#pdf("LL_Ecoli_Shigella.pdf", width=5, height=4)
TaxonomicLevelNames <- colnames(LL.ps@tax_table)
LL.ps@tax_table[,"Genus"] %>%
unique() %>%
sort() %>%
as.vector() -> DM.TaxNames # all taxonomic names within that higher level given by tlev
LL.ps %>%
tax_glom("Genus",NArm = TRUE) %>%
transform_sample_counts(function(OTU){OTU/sum(OTU)}) -> LL.glom.t
idx <- which(LL.glom.t@tax_table[,"Genus"] == "Escherichia/Shigella")
LL.compartment <- factor(LL.ps@sam_data$compartment,
levels= c("ID", "IM", "CD"))
df <- data.frame(group = LL.compartment,
abund = as.numeric(LL.glom.t@otu_table[,idx]))
#  if(sum(df$abund)< 0.01) next # Skips those plots where the sum of ALL abundances is below a certain threshold.
par(mgp=c(0,0.5,0), xaxt="t", mar=c(4,2,2,0.5))
boxplot(abund*100 ~ group,
data = df,
lwd = 2,
outline=F,
yaxt="n",
las = 1)
stripchart(abund*100 ~ group,
data = df,
vertical = TRUE,
method = "jitter",
jitter = 0.2,
add = TRUE,
cex=1.5,
col=df$group,
pch=16)
# col = color.ordination.samples[1:10])
title(main = paste0("Genus","\n"), cex.main=0.8)
title(ylab="Abundance (%)", line = 1, cex.lab=0.8)
axis(side=2, cex.axis=0.6)
#    dev.off()
LL.ps@sam_data
df <- data.frame(group = LL.compartment,
abund = as.numeric(LL.glom.t@otu_table[,idx]),
diet = LL.ps@sam_data$Diet,
infection = LL.ps@sam_data$Infection)
LL.compartment <- factor(LL.ps@sam_data$compartment, LL.ps
levels= c("ID", "IM", "CD"))
LL.compartment <- factor(LL.ps@sam_data$compartment, LL.ps,
levels= c("ID", "IM", "CD"))
LL.compartment <- factor(LL.ps@sam_data$compartment,
levels= c("ID", "IM", "CD"))
df <- data.frame(group = LL.compartment,
abund = as.numeric(LL.glom.t@otu_table[,idx]),
diet = LL.ps@sam_data$Diet,
infection = LL.ps@sam_data$Infection)
df
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
library(ggplot2)
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + theme_classic()
LL.diet <- factor(LL.ps@sam_data$Diet,
levels= c(1, 4))
df <- data.frame(group = LL.compartment,
abund = as.numeric(LL.glom.t@otu_table[,idx]),
diet = LL.ps@sam_data$Diet,
infection = LL.ps@sam_data$Infection)
df <- data.frame(group = LL.compartment,
abund = as.numeric(LL.glom.t@otu_table[,idx]),
diet = LL.diet,
infection = LL.ps@sam_data$Infection)
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + theme_classic()
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection)) + geom_boxplot(color="black") +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + theme_classic()
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + theme_classic()
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + facet_wrap(~group,  ncol=3)
p + theme_classic()
p <- ggplot(df, aes(y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + facet_wrap(~group,  ncol=3)
p <- ggplot(df, aes(x=infection, y=abund, color=diet)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + facet_wrap(~group,  ncol=3)
p + theme_classic()
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + facet_grid(rows = vars(diet), cols = vars(infection))
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection), na.rm = TRUE) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p + facet_grid(rows = vars(diet), cols = vars(infection))
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection), na.rm = TRUE) +
geom_jitter(position=position_jitter(0.2), na.rm = TRUE) + labs(title="", x="Compartment", y = "Abundance (%)")
p + facet_grid(rows = vars(diet), cols = vars(infection))
#p + facet_wrap(~group,  ncol=3)
p + theme_classic()
p <- ggplot(df, aes(x=group, y=abund, color=diet, shape=infection), na.rm = TRUE) +
geom_jitter(position=position_jitter(0.2), na.rm = TRUE) + labs(title="", x="Compartment", y = "Abundance (%)")
p <- p + facet_grid(rows = vars(diet), cols = vars(infection))
#p + facet_wrap(~group,  ncol=3)
p + theme_classic()
#p + facet_wrap(~group,  ncol=3)
p + theme_classic(na.rm = TRUE)
LL.diet
na.rm(LL.det)
na.rm(LL.diet)
?factor
LL.diet <- factor(LL.ps@sam_data$Diet,
levels= c(1, 4),
exclude = NA)
LL.diet
p <- ggplot(remove_missing(df, na.rm = TRUE, vars = c(diet, infection)), aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p <- ggplot(remove_missing(df, na.rm = TRUE, vars = c(Diet, Infection)), aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p <- ggplot(remove_missing(df, na.rm = TRUE, vars = c("diet", "infection")), aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p <- p + facet_grid(rows = vars(diet), cols = vars(infection))
#p + facet_wrap(~group,  ncol=3)
p + theme_classic()
p <- ggplot(remove_missing(df, na.rm = TRUE, vars = c("diet", "infection")), aes(x=group, y=abund, color=diet, shape=infection)) +
geom_jitter(position=position_jitter(0.2)) + labs(title="", x="Compartment", y = "Abundance (%)")
p <- p + facet_grid(rows = vars(diet), cols = vars(infection)) + ylim(0,0.2)
#p + facet_wrap(~group,  ncol=3)
p + theme_classic()
save.image("/home/chrisgaby/PigChallengeStudyAnalysis/LL_PP_challenge_studyv3.RData")
?plotmath
vignette("plotmath")
vignette(plotmath)
load("/home/chrisgaby/Desktop/Shahid_R/.RData")
knitr::opts_chunk$set(tidy=TRUE, tidy.opts=list(width.cutoff=73))
# Load the required libraries.
library(ggplot2)
library(factoextra)
library(vegan)
library(RANN)
# Import the MASH symmetric square matrix that I made using a unix script that calculated pairwise distances for all 592 chromosomes.
dm <- read.table("/home/chrisgaby/Documents/USDA/data/MASH/salmRefChromMASHDist2.tab", header=T)
# Preview the distance matrix.
dm[1:5,1:5]
nrow(dm)
ncol(dm)
# Subsetting may be based on the row or column names, which correspond to Genbank accessions, plus the ".fa" extension of the filename.
#dm["CP011289.1.fa",]
#dm[,"CP011289.1.fa"]
# Remove the outlier rows and columns by subsetting the distance matrix to omit by using a negative or "-".
# Create a vector of the row numbers corresponding to the outlier names.
ix <- which(rownames(dm) %in% c("CP011289.1.fa", "CP022135.1.fa", "CP022467.1.fa", "CP022504.1.fa", "CP023345.1.fa", "CP034074.1.fa", "CP034697.1.fa", "CP034717.1.fa", "CP041011.1.fa", "CP053579.1.fa", "CP053581.1.fa", "CP053582.1.fa", "CP053584.1.fa", "CP053585.1.fa", "CP054422.1.fa", "CP054715.1.fa", "CP059886.1.fa"))
# Remove the row outliers.
clean <- dm[-ix, ]
# Create a vector of the column numbers corresponding to the outlier names.
ix.col <- which(colnames(dm) %in% c("CP011289.1.fa", "CP022135.1.fa", "CP022467.1.fa", "CP022504.1.fa", "CP023345.1.fa", "CP034074.1.fa", "CP034697.1.fa", "CP034717.1.fa", "CP041011.1.fa", "CP053579.1.fa", "CP053581.1.fa", "CP053582.1.fa", "CP053584.1.fa", "CP053585.1.fa", "CP054422.1.fa", "CP054715.1.fa", "CP059886.1.fa"))
# Remove the column outliers.
clean.row.col <- clean[,-ix.col ]
# Check the dimensions of the original vs. the cleaned distance matrix to see that it is indeed reduced accordingly.
dim(dm) # Returns 592 X 592
dim(clean.row.col) # Should return 575 x 575
nrow(clean.row.col) # Should return 575
ncol(clean.row.col) # Should return 575
dm.clean = clean.row.col
library(factoextra)
# Set the number of clusters, k; that is, establish the number of sets into which the data shall be divided.
k = 10
# Set the random number in R so that there are consistent results from the k-means function.
set.seed(123)
# Run the k-means function and save the resulting output as a k-means object called Senterica.km.res.
Senterica.km.res <- kmeans(dm.clean, centers = k, iter.max = 50, nstart = 50)
# Print the resulting object.
# print(Senterica.km.res)
# Accessing components of the k-means result
# The components of the kmeans object, which is a list, are displayed using the str() function.
str(Senterica.km.res)
# Cluster affiliation of samples
head(Senterica.km.res$cluster)
# An individual chromosome identifier's cluster affiliation may be obtained as follows:
Senterica.km.res$cluster[["CP004027.1.fa"]]
# The list of chromosome accessions that belong to a specified cluster may be obtained as follows:
which(Senterica.km.res$cluster=="5") # The resulting numbers are the index element numbers for the chromosomes in the specified cluster.
# Then, the index element numbers may be specified to confirm the cluster affiliation as follows:
Senterica.km.res$cluster[c(122,195)] # Should return the cluster number.
# Cluster size
Senterica.km.res$size
# The size of a single cluster may be obtained as follows.
Senterica.km.res$size[[5]] # Gives the size of cluster 5
# Cluster means, or centers, are the mean of the chromosome distances for those chromosomes that fall into a cluster.
Senterica.km.res$centers
#The centers component is essentially a table where the rows correspond to cluster numbers, and in our case the columns correspond to the 575 chromosome accessions. As an example, the center value for cluster 1, chromosome identifier AP019692.1.fa is the mean of distances for the accessions that belong in cluster 1. Those accessions are listed as follows:
names(which(Senterica.km.res$cluster=="1"))
# Hence, the "center" for cluster 1 for chromosome AP019692.1.fa would be the mean of the distances between cluster 1 affiliated chromosomes and chromosome AP019692.1.fa, given as follows:
dm.clean[names(which(Senterica.km.res$cluster=="1")), "AP019692.1.fa"] # The distances from the distance matrix
# And the mean of the distances is given as follows:
mean(dm.clean[names(which(Senterica.km.res$cluster=="1")), "AP019692.1.fa"])
# Let's place the result in an oject so we can test for equality with the "center" value later:
calculated.mean <- mean(dm.clean[names(which(Senterica.km.res$cluster=="1")), "AP019692.1.fa"])
# Is this calculated mean the same as the "center" in the kmeans object? The corresponding center is obtained as follows:
Senterica.km.res$centers[1, "AP019692.1.fa"]
# Now test if the 2 values are the same:
signif(calculated.mean,10) == signif(Senterica.km.res$centers[1,"AP019692.1.fa"],10) # This comparison should be TRUE
# Note that because of slight rounding differences, the same number of significant digits must be specified for the comparison to work, hence the use of the signif() function above. If the result of the above comparison is TRUE, then the cluster mean was correctly calculated.
# All chromosome names that fall into cluster 2 may be obtained with the following:
names(which(Senterica.km.res$cluster=="2"))
# The distance matrix may be reduced to just those chromosomes in cluster 2 as follows:
dm.clean[names(which(Senterica.km.res$cluster=="2")),names(which(Senterica.km.res$cluster=="2"))]
# Let's create an object for the reduced distance matrix:
clust2.dm.clean <- dm.clean[names(which(Senterica.km.res$cluster=="2")),names(which(Senterica.km.res$cluster=="2"))]
# Let's pull out the centers for cluster 2
Senterica.km.res$centers[2, names(which(Senterica.km.res$cluster=="2"))]
# Create an object consisting of the cluster 2 centers
clust2.centers <- Senterica.km.res$centers[2, names(which(Senterica.km.res$cluster=="2"))]
# Check to see that the chromosome names are the same in the 2 objects
colnames(clust2.dm.clean) == names(clust2.centers) # Should all be TRUE
# Add on the centers to the reduced distance matrix as a new row.
centroid.row.dm <- rbind(centroid = clust2.centers, clust2.dm.clean)
# Check that the names match before adding the column. A zero must be added for the centroid identity comparison.
rownames(centroid.row.dm) == names(c(centroid=0,clust2.centers))
# Bind the centroid column as the first column
cbind(centroid=c(centroid=0,clust2.centers),centroid.row.dm)
# Create an object for the new distance matrix with the centroid added.
clust2.centroid.dm <- cbind(centroid=c(centroid=0,clust2.centers),centroid.row.dm)
# Create a k-means object using just the data points in cluster 2 by using our reduced distance matrix. Note that this k-means object includes a pseudo-sample representing the centroid.
clust2.km.res <- kmeans(clust2.centroid.dm, centers = 1, iter.max = 50, nstart = 50)
# Create the data visualization of the k-means cluster 2 and save the visualziation as an object named "plot".
plot <- fviz_cluster(clust2.km.res, clust2.centroid.dm, stand = T, geom=c("point"), main = "S. enterica subs. enterica cluster 2 chromosome similarity")
# Add a red "X" to mark the centroid datapoint.
plot + geom_point() + annotate("point", x = plot$data["centroid","x"], y = 	plot$data["centroid","y"], colour = "red", shape = 4, size = 4)
# Note that the centroid datapoint does not seem to match the exact gg-plot denoted center of the cluster.
# Note that one may obtain the X,Y coordinates of the centroid data point in the plot object as follows:
plot$data["centroid",]
library(vegan)
# Make the ordination object from the cluster 2 distance matrix that includes the centroid as a "pseudosample".
NMDS.clust2=metaMDS(clust2.centroid.dm, distance="jaccard", k=2, try =20, trymax = 1000)
# Create an object for the X,Y coordinates of
plotxy <- NMDS.clust2$points
# Create a ggplot visualization object of the NMDS ordination and mark the centroid with a red, inverted triangle
plot <- ggplot(as.data.frame(plotxy), aes(x=plotxy[,1], y=plotxy[,2])) + geom_point(size=2, shape=23) + annotate("point", x = plotxy["centroid",1], y = 	plotxy["centroid",2], colour = "red", shape = 6, size = 4)
# Visualize the plot
plot
library(RANN)
# Use a funcion for nearest neighbor search from the RANN package to identify the closest neighbors to all points in the plot. Note that the k parameter denotes how many nearest neighbors are identified, which appear as columns in the resulting data object.
nn.plotxy <- nn2(data=plotxy, k=5)
# The nearest neighbor object consists of 2 components, a table of nearest neighbors for every datapoint, and distances
str(nn.plotxy)
# The following provides the index number for a specified rowname, in our case the "centroid".
which(rownames(plotxy)=="centroid")
# Provide the nearest neighbor result for the centorid. Note that usually the closest neighbor is the datapoint itself, although if there are overlapping, identical datapoints, then the first nearest neighbor may be a different sample.
nn.plotxy$nn.idx[which(rownames(plotxy)=="centroid"),]
# Determine whether the first item in the nearest neighbor list is identical to datapoint itself
nn.plotxy$nn.idx[which(rownames(plotxy)=="centroid"),][1] == which(rownames(plotxy)=="centroid")
# Plot the 3 nearest datapoints to the centroid by directly specifying their rownumbers using indexes in the nearest neighbor data object
plot + annotate("point", x = plotxy[nn.plotxy$nn.idx[which(rownames(plotxy)=="centroid"),][2],1], y = plotxy[nn.plotxy$nn.idx[which(rownames(plotxy)=="centroid"),][2],2], colour = "red", shape = 5, size = 4) + annotate("point", x = plotxy[nn.plotxy$nn.idx[which(rownames(plotxy)=="centroid"),][3],1], y = plotxy[nn.plotxy$nn.idx[which(rownames(plotxy)=="centroid"),][3],2], colour = "red", shape = 5, size = 4) + annotate("point", x = plotxy[nn.plotxy$nn.idx[which(rownames(plotxy)=="centroid"),][4],1], y = plotxy[nn.plotxy$nn.idx[which(rownames(plotxy)=="centroid"),][4],2], colour = "red", shape = 5, size = 4)
?pam
pam(dm.clean, k=5, diss = TRUE)
library(cluster)
pam(dm.clean, k=5, diss = TRUE)
Senterica.pam.res <- pam(dm.clean, k=5, diss = TRUE)
str(Senterica.pam.res)
Senterica.pam.res$id.med
clean.dm[Senterica.pam.res$id.med]
dm.clean[Senterica.pam.res$id.med]
names(dm.clean)[Senterica.pam.res$id.med]
Senterica.pam.res$medoids
Senterica.pam.res$id.med
names(dm.clean)[Senterica.pam.res$id.med] == Senterica.pam.res$medoids
str(Senterica.pam.res)
Senterica.pam.res$medoids
# Create an ordination of the whole dataset in the original data matrix, onto which the cluster representatives will be marked.
NMDS.cluster=metaMDS(dm.clean, distance="jaccard", k=2, try = 20, trymax = 300)
# Create an object for the X,Y coordinates of the ordination of the cluster distance matrix.
plot2xy <- NMDS.cluster$points
# Create the initiall ggplot.
plot <- ggplot(as.data.frame(plot2xy), aes(x=plot2xy[,1], y=plot2xy[,2])) + geom_point(size=2, shape=1)
# Mark the cluster representatives on the plot and change the plot theme.
plot2 <- plot +
annotate("point", x = plot2xy[Senterica.pam.res$medoids,1], y = plot2xy[Senterica.pam.res$medoids,2], colour = "red", shape = 2, size = 3) +
theme_bw()
plot2
Senterica.pam.res$medoids
Senterica.pam.res <- pam(dm.clean, k=5, diss = TRUE)
Senterica.pam.res <- pam(dm.clean, k=5, diss = TRUE)
Senterica.pam.res$medoids
colbind(1:clus, Senterica.pam.res$medoids)
cbind(1:clus, Senterica.pam.res$medoids)
cbind(1:5, Senterica.pam.res$medoids)
Senterica.pam.res$id.med
Senterica.pam.res$medoids
Senterica.pam.res$clustering
Senterica.pam.res$clusinfo
Senterica.pam.res$silinfo
# Bind the medoid representatives into a table using cbind and adding a number for the cluster
kmedoids.clust.reps <- cbind(1:5, Senterica.pam.res$medoids)
kmedoids.clust.reps
# Write a table of cluster number and Chromosome accessions that are nearest to the centroid in each cluster.
write.table(kmedoids.clust.reps, file=paste0(clus, "ChromReps.tsv"), quote=FALSE, sep='\t', row.names = FALSE)
clus = 5
write.table(kmedoids.clust.reps, file=paste0(clus, "ChromReps.tsv"), quote=FALSE, sep='\t', row.names = FALSE)
setwd("/home/chrisgaby/Documents/USDA/RMarkdown/")
setwd("/home/chrisgaby/Documents/USDA/RMarkdown/kmedoidsSets/")
# Add descriptive column headers.
colnames(kmedoids.clust.reps)[1:3] <- c("ClusterNumber","ClusterRepresentative")
# Add descriptive column headers.
colnames(kmedoids.clust.reps)[1:2] <- c("ClusterNumber","ClusterRepresentative")
kmedoids.clust.reps
# Write a table of cluster number and Chromosome accessions that are nearest to the centroid in each cluster.
write.table(kmedoids.clust.reps, file=paste0(clus, "ChromRepsKmedoids.tsv"), quote=FALSE, sep='\t', row.names = FALSE)
setwd("/home/chrisgaby/Documents/USDA/RMarkdown/kmedoidsSets/")
getwd()
getwd()
setwd("/home/chrisgaby/Documents/USDA/RMarkdown/kmedoidsSets/")
getwd()
plot
# Create an ordination of the whole dataset in the original data matrix, onto which the cluster representatives will be marked.
NMDS.cluster=metaMDS(dm.clean, distance="jaccard", k=2, try = 20, trymax = 300)
# Create an object for the X,Y coordinates of the ordination of the cluster distance matrix.
plot2xy <- NMDS.cluster$points
# Create a vector of Chromosome names corresponding to the cluster representatives for the clusters.
#chromnames <- kmeans.centroid.reps[,3]
# Create the initiall ggplot.
plot <- ggplot(as.data.frame(plot2xy), aes(x=plot2xy[,1], y=plot2xy[,2])) + geom_point(size=2, shape=1)
clusters = c(5, 10) #15, 20, 25, 50, 100, 150, 200, 250)
for (clus in clusters) {
Senterica.pam.res <- pam(dm.clean, k = clus, diss = TRUE)
# Bind the medoid representatives into a table using cbind and adding a number for the cluster
kmedoids.clust.reps <- cbind(1:clus, Senterica.pam.res$medoids)
# Add descriptive column headers.
colnames(kmedoids.clust.reps)[1:2] <- c("ClusterNumber","ClusterRepresentative")
# Write a table of cluster number and Chromosome accessions that are nearest to the centroid in each cluster.
write.table(kmedoids.clust.reps, file=paste0(clus, "ChromRepsKmedoids.tsv"), quote=FALSE, sep='\t', row.names = FALSE)
# Mark the cluster representatives on the plot and change the plot theme.
plot2 <- plot +
annotate("point",
x = plot2xy[Senterica.pam.res$medoids,1],
y = plot2xy[Senterica.pam.res$medoids,2],
colour = "red",
shape = 2,
size = 3) +
theme_bw()
ggsave(paste0(clus,"ChromRepsKmedoids.png"), width = 6, height = 6, units = "in")
}
#names(dm.clean)[Senterica.pam.res$id.med] == Senterica.pam.res$medoids
clusters = c(5, 10, 15, 20, 25, 50, 100, 150, 200, 250)
for (clus in clusters) {
Senterica.pam.res <- pam(dm.clean, k = clus, diss = TRUE)
# Bind the medoid representatives into a table using cbind and adding a number for the cluster
kmedoids.clust.reps <- cbind(1:clus, Senterica.pam.res$medoids)
# Add descriptive column headers.
colnames(kmedoids.clust.reps)[1:2] <- c("ClusterNumber","ClusterRepresentative")
# Write a table of cluster number and Chromosome accessions that are nearest to the centroid in each cluster.
write.table(kmedoids.clust.reps, file=paste0(clus, "ChromRepsKmedoids.tsv"), quote=FALSE, sep='\t', row.names = FALSE)
# Mark the cluster representatives on the plot and change the plot theme.
plot2 <- plot +
annotate("point",
x = plot2xy[Senterica.pam.res$medoids,1],
y = plot2xy[Senterica.pam.res$medoids,2],
colour = "red",
shape = 2,
size = 3) +
theme_bw()
ggsave(paste0(clus,"ChromRepsKmedoids.png"), width = 6, height = 6, units = "in")
}
